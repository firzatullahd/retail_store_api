swagger: "2.0"
info:
  description: This is a simple API
  version: "1.2"
  title: Simple Inventory API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers

paths:
  /items:
    get:
      tags:
        - developers
      summary: item list
      operationId: list item
      description: |
        By passing in the appropriate options, you can search for
        certain available item
      produces:
        - application/json
      parameters:
        - in: query
          name: items_id
          description: pass an optional search string for looking up item
          required: false
          type: string
        - in: query
          name: category
          description: pass an optional search string for looking up item
          required: false
          type: string
        - in: query
          name: name
          description: pass an optional search string for looking up item
          required: false
          type: string
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          format: uint32
          minimum: 0
          maximum: 50
        - in: query
          name: minPrice
          description: minimum price
          type: integer
          format: uint32
          minimum: 0
          maximum: 20000000
        - in: query
          name: maxPrice
          description: maximum price
          type: integer
          format: uint32
          minimum: 0
          maximum: 20000000
        - in: query
          name: sort
          description: pass an optional search string for looking up item
          required: false
          type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: "#/definitions/Item"
        400:
          description: bad input parameter
    post:
      tags:
        - admins
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: inventoryItem
          description: Inventory item to add
          schema:
            $ref: "#/definitions/Item"
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
  /shopping_carts:
    get:
      tags:
        - developers
      summary: shopping cart list
      operationId: shopping cart item
      description: |
        By passing in the appropriate options, you can get items in shopping cart
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: pass an required search string for looking up item in shopping cart
          required: true
          type: string
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: "#/definitions/shopping_cart"
        400:
          description: bad input parameter
    post:
      tags:
        - developer
      summary: adds an item to shopping cart
      operationId: addItemToShoppingCart
      description: Adds an item to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          required: true
          type: string
        - in: body
          name: item_id
          description: Inventory item to add
          required: true
          schema:
            type: object
            properties:
              item_id:
                type: integer
                format: uint32
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists
    delete:
      tags:
        - developer
      summary: delete an item from shopping cart
      operationId: deleteItemFromShoppingCart
      description: delete an item from the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          required: true
          type: string
        - in: body
          name: item_id
          description: Inventory item to add
          required: true
          schema:
            type: object
            properties:
              item_id:
                type: integer
                format: uint32
      responses:
        201:
          description: item deleted
        400:
          description: invalid input, object invalid
        409:
          description: item not exist
  /orders:
    get:
      tags:
        - developers
      summary: shopping cart list
      operationId: order item
      description: By passing in the appropriate options, you can get items in shopping cart
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: pass an required search string for looking up ite  in shopping cart
          required: true
          type: string
        - in: query
          name: order_id
          description: pass an order_id
          required: true
          type: integer
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: "#/definitions/order"
        400:
          description: bad input parameter
    post:
      tags:
        - developer
      summary: adds an order
      operationId: add an order
      description: Adds an order to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          required: true
          type: string
        - in: body
          name: item
          description: Inventory item to add
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/Item"
      responses:
        201:
          description: order created
        400:
          description: invalid input, object invalid
    delete:
      tags:
        - developer
      summary: delete order item
      operationId: delete order
      description: delete an order from the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: authorization
          description: token
          required: true
          type: string
        - in: body
          name: item_id
          description: Inventory item to add
          required: true
          schema:
            type: object
            properties:
              item_id:
                type: integer
                example: 0
      responses:
        201:
          description: order deleted
        400:
          description: invalid input, object invalid
        409:
          description: order not exist
  /register:
    post:
      tags:
        - developer
      summary: register user account
      operationId: register user account
      description: register user account to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: register user
          description: register user account
          required: true
          schema:
            $ref: "#/definitions/RegisterUser"
      responses:
        201:
          description: account created
        400:
          description: invalid input, object invalid
  /login:
    post:
      tags:
        - developer
      summary: login user account
      operationId: login user account
      description: login user account to the system
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user login
          description: login user account
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: login access granted
        400:
          description: incorrect username/password
definitions:
  Item:
    type: object
    required:
      - id
      - name
      - description
      - category
      - price
    properties:
      id:
        type: integer
        format: uint32
        example: 69
      name:
        type: string
        example: Widget Adapter
      description:
        type: string
        example: "ini adalah buku budi"
      category:
        type: string
      price:
        type: integer
        format: uint32
  shopping_cart:
    type: object
    properties:
      no:
        type: integer
        format: uint32
        example: 1
      Item:
        $ref: "#/definitions/Item"
  order:
    type: object
    properties:
      order_id:
        type: integer
        example: 1
      courier:
        type: object
        properties:
          company_name:
            type: string
            example: "JNE"
      total_amount:
        type: integer
      address:
        type: string
      payment_id:
        type: string
      status:
        type: string
  RegisterUser:
    type: object
    properties:
      username:
        type: string
      nama:
        type: string
      email:
        type: string
        example: "email@email.com"
      phone_number:
        type: string
        example: "+628999"
      password:
        type: string
        example: "password123"
  UserLogin:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
        example: "password123"

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /a4443/retail_store/1.2
schemes:
  - https
